//! This is the module Awesome.toml
use crate::prelude::*;
use crate::utils::XTake;
use crate::VERSION;
use std::fs;
use std::path::Path;
use toml::Value;

mod runner;

// --- re-exports
use runner::Runner;

// --- Consts
const AWESOME_TMPL: &str = include_str!("../../tmpl/Awesome.toml");
const AWESOME_FILE_NAME: &str = "Awesome.toml";
const SRC_TAURI_DIR: &str = "src-tauri";
const PACKAGE_JSON_FILE: &str = "package.json";

pub fn ensure_config(root_dir: &Path) -> Result<Config> {
	// --- Check that we run in the root folder
	if !root_dir.join(SRC_TAURI_DIR).is_dir() && !root_dir.join(PACKAGE_JSON_FILE).is_file() {
		return Err(Error::DirNotValid);
	}

	// --- Check
	let awesome_file = root_dir.join(AWESOME_FILE_NAME);

	if !awesome_file.is_file() {
		let mut content = String::new();
		content.push_str(&format!(
			r#"# Generated by 'awesome-app' command line.
awesome_app_version = "{VERSION}"

"#
		));
		content.push_str(AWESOME_TMPL);
		fs::write(&awesome_file, content)?;
	}

	let toml_str = fs::read_to_string(&awesome_file)?;

	match toml::from_str::<Value>(&toml_str) {
		Ok(root) => Config::try_from(root),
		Err(ex) => Err(Error::ConfigParsing(format!("{}", ex))),
	}
}

#[derive(Debug)]
pub struct Config {
	pub cli_version: Option<String>,
	pub dev_runners: Option<Vec<Runner>>,
}

impl TryFrom<Value> for Config {
	type Error = Error;
	fn try_from(mut val: Value) -> Result<Config> {
		let cli_version = val.x_take::<String>("cli_version")?;
		let runners_raw = val.get_mut("runners").map(|runners| runners.x_take::<Vec<Value>>("dev"));

		// TODO: need to cleans this up
		let runners_raw = match runners_raw {
			Some(r) => Some(r?),
			None => None,
		}
		.flatten();

		// Option<Result<Vec<Runner>>>
		let dev_runners = runners_raw.map(|v| v.into_iter().map(Runner::try_from).collect::<Result<Vec<_>>>());

		// Option<Vec<Runner>>
		let dev_runners = match dev_runners {
			Some(r) => Some(r?),
			None => None,
		};

		Ok(Config {
			cli_version,
			dev_runners,
		})
	}
}

// region:    --- Tests
#[cfg(test)]
#[path = "../_tests/tests_config.rs"]
mod tests;
// endregion: --- Tests
